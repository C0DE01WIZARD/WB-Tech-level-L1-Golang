package main

import (
    "fmt"
    "sync"
)

// Объявляем переменную m типа sync.Mutex.
// Mutex - это механизм синхронизации, который позволяет блокировать доступ к ресурсу,
// пока он используется другой горутиной.
var m sync.Mutex

// Объявляем переменную dataMap типа map[int]string.
// Это словарь, где ключи - это целые числа, а значения - строки.
var dataMap = make(map[int]string)

// Функция writer принимает один аргумент типа int и записывает его в dataMap.
func writer(key int) {
    // Блокируем доступ к dataMap с помощью m.Lock().
    // Это гарантирует, что только одна горутина может изменять map в данный момент времени.
    m.Lock()
    defer m.Unlock() // После выполнения функции unlock автоматически.
    dataMap[key] = "value" // Записываем ключ и значение в dataMap.
}

// Функция main инициализирует переменные и запускает горутины.
func main() {
    var wg sync.WaitGroup // Объявляем переменную wg типа sync.WaitGroup для управления горутинами.
    wg.Add(10) // Добавляем 10 горутин в список ожидания.

    for i := 0; i < 10; i++ {
        // Запускаем горутину, передавая ей аргумент i.
        go func(i int) {
            defer wg.Done() // После выполнения функции уменьшаем счетчик горутин.
            writer(i) // Записываем ключ в dataMap.
        }(i)
    }

    wg.Wait() // Ожидаем завершения всех горутин, прежде чем продолжить.

    for key, value := range dataMap { // Перебираем данные в dataMap.
        fmt.Printf("Key: %d, Value: %s\n", key, value) // Выводим ключи и значения.
    }
}