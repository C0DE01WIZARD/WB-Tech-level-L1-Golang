// 4.Реализовать постоянную запись данных в канал (главный поток). Реализовать набор из N воркеров, которые читают произвольные данные из канала и выводят в stdout. Необходима возможность выбора количества воркеров при старте.

package main

import (
    "fmt"
    "sync" // импортируем модуль sync для для синхронизации горутин и обеспечения упорядоченного доступа к общим ресурсам
)

func main() {
	fmt.Println("Exercise04")
    // Вводим количество воркеров для запуска на работу
    var numbersWorkers int // Определяем переменную numbersWorkers с типом: int   
    fmt.Printf("Введите количество воркеров для передачи в канал: ") // При запуске программы вводим количество воркеров
    fmt.Scan(&numbersWorkers)

    // Создаем канал для передачи данных с типом данных: string
    ChannelWorkers := make(chan string)

    // Объявляем переменную wg для синхронизации воркеров
    var wg sync.WaitGroup // Тип sync.WaitGroup используется для ожидания завершения воркеров.

    // Запускаем воркеры
    for i := 0; i < numbersWorkers; i++ {
        wg.Add(1) // Используем wg.Add(1) для увеличения счетчика ожидания на 1, для того чтобы ожидать ещё воркеров
        go worker(ChannelWorkers, &wg) // Запускаем воркера в горутине. В аргументах передаём ссылку на &wg и ChannelWorkers
    }

    // Постоянно отправляем данные в канал
    for {
		// Отправляем строку "Отправка данных в канал" в канал.
        ChannelWorkers <- "Отправка данных в канал"
    }

    // Ожидаем завершения воркеров
    wg.Wait() // wg.Wait() блокирует текущую горутину до тех пор, пока все воркеры не вызовут wg.Done() после завершения своей работы.
}

func worker(dataChan chan string, wg *sync.WaitGroup) {
    for {
        // Читаем данные из канала
        data, ok := <-dataChan // Тип "ok" используется для проверки успешности получено сообщения из канала.
        if !ok { // Если канал закрыт то будет значение false, то значит что данные не могут быть получены
            // То по условию закрываем канал, завершаем работу воркера
            wg.Done()
            return
        }
        // Выводим данные при успешной отправки данных
        fmt.Println(data)
    }
}